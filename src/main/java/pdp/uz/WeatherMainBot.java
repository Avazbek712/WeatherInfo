package pdp.uz;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;

import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;

import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;


import pdp.uz.model.ForecastDayDTO;
import pdp.uz.model.WeatherDTO;


import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;


/**
 * Created by Avazbek on 25/02/25 20:51
 */
public class WeatherMainBot extends TelegramLongPollingBot {
    private final Map<Long, Integer> userForecastOffsets = new HashMap<>();
    private final Map<Long, String> userCountry = new HashMap<>();
    private final Map<Long, Boolean> waitingForCity = new HashMap<>();
    WeatherService weatherService = new WeatherService();

    public WeatherMainBot(String token) {
        super(token);
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message message = update.getMessage();

            if (message.hasLocation()) {
                Double latitude = message.getLocation().getLatitude();
                Double longitude = message.getLocation().getLongitude();
                weatherByLocation(message.getChatId().toString(), latitude, longitude);
            } else {
                processMessage(message);
            }
        } else if (update.hasCallbackQuery()) {

            String data = update.getCallbackQuery().getData();
            Message message = update.getCallbackQuery().getMessage();


            if ("update_weather".equals(data)) {
                editedWeather(message);
            } else if (data.equals("forecast_back") || data.equals("forecast_forward")) {
                handleForecastNavigation(update.getCallbackQuery());
            }
        }
    }

    private void weatherByLocation(String chatId, Double latitude, Double longitude) {
        try {
            String latitudeString = latitude.toString();
            String longitudeString = longitude.toString();

            WeatherDTO weatherDTO = weatherService.getWeatherInfoByLocation(longitudeString, latitudeString, 2);

            String country = weatherDTO.getLocation().getCountry();

            String city = weatherDTO.getLocation().getName();

            double temp = weatherDTO.getCurrent().getTempC();

            LocalDateTime localtime = weatherDTO.getLocation().getLocaltime();
            DateTimeFormatter dayMonthFormatter = DateTimeFormatter.ofPattern("dd/MM");

            String date = dayMonthFormatter.format(localtime);

            double maxTemp = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMaxTemp()).findFirst().orElse(0.0);

            double minTemp = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMinTemp()).findFirst().orElse(0.0);

            String condition = weatherDTO.getCurrent().getCondition().getText();

            double windKph = weatherDTO.getCurrent().getWindKph();

            double humidity = weatherDTO.getCurrent().getHumidity();

            String sunRise = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunrise()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            String sunSet = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunset()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
            String time = LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));

            String text = """
                    <b>üìÜ –î–∞—Ç–∞:</b> %s
                    <b>‚è∞ –í—Ä–µ–º—è:</b> %s
                    <b>üåç –°—Ç—Ä–∞–Ω–∞:</b> %s \s
                    <b>üåç –ì–æ—Ä–æ–¥:</b> %s \s
                    <b>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> %d¬∞C \s
                    <b>üìà –ú–∞–∫—Å:</b> %d¬∞C  |  <b>üìâ –ú–∏–Ω:</b> %d¬∞C \s
                    <b>‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> %s \s
                    <b>üí® –í–µ—Ç–µ—Ä:</b> %d –∫–º/—á \s
                    <b>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> %d \s
                    <b>üåÖ –í–æ—Å—Ö–æ–¥:</b> %s \s
                    <b>üåá –ó–∞–∫–∞—Ç:</b> %s \s
                    """.formatted(date, time, country, city, (int) temp, (int) maxTemp, (int) minTemp, condition, (int) windKph, (int) humidity, sunRise, sunSet);

            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            InlineKeyboardButton updateButton = new InlineKeyboardButton();
            updateButton.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
            updateButton.setCallbackData("update_weather");

            keyboard.add(List.of(updateButton));
            inlineKeyboard.setKeyboard(keyboard);
            sendTextMessage(chatId, text, inlineKeyboard);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }


    private void processMessage(Message message) {
        String text = message.getText();
        if (waitingForCity.containsKey(message.getChatId())) {
            changeCity(message);
            return;
        }


        switch (text) {
            case "/start" -> userStart(message);
            case "üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞" -> nowWeather(message);

            case "‚ÑπÔ∏è –û –±–æ—Ç–µ" -> botInfo(message);
            case "üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è" -> {
            }
            case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" -> settings(message);
            case "\uD83C\uDF0D –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥" -> askForCity(message);
            case "\uD83D\uDD19 –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> mainMenu(message);
            case "\uD83D\uDCC5 –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è" -> {
                //TODO –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–µ—à—å —ç—Ç—É –∫–Ω–æ–ø–∫—É
                userForecastOffsets.put(message.getChatId(), 0);
                threeDays(message);
            }

            default -> {
                String chatId = message.getChatId().toString();
                String textDef = """
                        ‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!</b>
                        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
                        - <b>/start</b> ‚Äì –ù–∞—á–∞—Ç—å
                        - <b>üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</b> ‚Äì –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
                        - <b>‚ÑπÔ∏è –û –±–æ—Ç–µ</b> ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        """;
                sendTextMessage(chatId, textDef);
            }
        }
    }


    private void editedThreeDays(Message message) {
        try {
            Long chatId = message.getChatId();

            int daysOffSet = userForecastOffsets.get(chatId);
            LocalDate targetDate = LocalDate.now().plusDays(daysOffSet);

            String city = userCountry.getOrDefault(chatId, "Tashkent");
            WeatherDTO weather = weatherService.getWeatherInfo(city, 3);

            String country = weather.getLocation().getCountry();
            String cityName = weather.getLocation().getName();
            double maxTemp = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMaxTemp()).findFirst().orElse(0.0);

            double minTemp = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMinTemp()).findFirst().orElse(0.0);

            Double windSpeed = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMaxWindKph()).findFirst().orElse(0.0);

            Double humidity = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getAvgHumidity()).findFirst().orElse(0.0);

            String sunSet = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunset()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            String sunRise = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunrise()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            StringBuilder textWeather = new StringBuilder();

            textWeather.append("üìç <b>").append(cityName).append(",").append(country).append("</b>\n")
                    .append("üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ ").append(targetDate).append("</b>\n\n")
                    .append("üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> –ú–∞–∫—Å ").append(maxTemp).append("¬∞C | –ú–∏–Ω ").append(minTemp).append("¬∞C\n")
                    .append("üí® <b>–í–µ—Ç–µ—Ä:</b> ").append(windSpeed).append(" –∫–º/—á\n")
                    .append("üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> ").append(humidity).append("%\n")
                    .append("üåÖ <b>–í–æ—Å—Ö–æ–¥:</b> ").append(sunRise).append("\n")
                    .append("üåá <b>–ó–∞–∫–∞—Ç:</b> ").append(sunSet).append("\n\n")
                    .append("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –¥–Ω—è–º–∏!");

            String messageText = textWeather.toString();


            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            List<InlineKeyboardButton> navigationRow = new ArrayList<>();

            if (daysOffSet > 0) { // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                InlineKeyboardButton backButton = new InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥");
                backButton.setCallbackData("forecast_back");
                navigationRow.add(backButton);
            }

            InlineKeyboardButton dateButton = new InlineKeyboardButton("üìÖ " + targetDate);
            dateButton.setCallbackData("forecast_date");

            if (daysOffSet < 2) { // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä—ë–¥"
                InlineKeyboardButton forwardButton = new InlineKeyboardButton("‚ñ∂ –í–ø–µ—Ä—ë–¥");
                forwardButton.setCallbackData("forecast_forward");
                navigationRow.add(forwardButton);
            }

            if (!navigationRow.isEmpty()) {
                keyboard.add(navigationRow);
            }

            keyboard.add(List.of(dateButton));
            inlineKeyboard.setKeyboard(keyboard);


            editTextMessage(chatId.toString(), messageText, inlineKeyboard, message.getMessageId());


        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

        // todo –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–º –º–µ—Ç–æ–¥—ã
    private void threeDays(Message message) {
        try {
            Long chatId = message.getChatId();

            int daysOffSet = userForecastOffsets.get(chatId);
            LocalDate targetDate = LocalDate.now().plusDays(daysOffSet);

            String city = userCountry.getOrDefault(chatId, "Tashkent");
            WeatherDTO weather = weatherService.getWeatherInfo(city, 3);

            String country = weather.getLocation().getCountry();
            String cityName = weather.getLocation().getName();
            double maxTemp = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMaxTemp()).findFirst().orElse(0.0);

            double minTemp = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMinTemp()).findFirst().orElse(0.0);

            Double windSpeed = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMaxWindKph()).findFirst().orElse(0.0);

            Double humidity = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getAvgHumidity()).findFirst().orElse(0.0);

            String sunSet = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunset()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            String sunRise = weather.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(targetDate))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunrise()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            StringBuilder textWeather = new StringBuilder();

            textWeather.append("üìç <b>").append(cityName).append(",").append(country).append("</b>\n")
                    .append("üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ ").append(targetDate).append("</b>\n\n")
                    .append("üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> –ú–∞–∫—Å ").append(maxTemp).append("¬∞C | –ú–∏–Ω ").append(minTemp).append("¬∞C\n")
                    .append("üí® <b>–í–µ—Ç–µ—Ä:</b> ").append(windSpeed).append(" –∫–º/—á\n")
                    .append("üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> ").append(humidity).append("%\n")
                    .append("üåÖ <b>–í–æ—Å—Ö–æ–¥:</b> ").append(sunRise).append("\n")
                    .append("üåá <b>–ó–∞–∫–∞—Ç:</b> ").append(sunSet).append("\n\n")
                    .append("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –¥–Ω—è–º–∏!");

            String messageText = textWeather.toString();

            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            // üî• –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            List<InlineKeyboardButton> row = new ArrayList<>();
            if (daysOffSet > 0) {
                InlineKeyboardButton backButton = new InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥");
                backButton.setCallbackData("forecast_back");
                row.add(backButton);
            }

            InlineKeyboardButton dateButton = new InlineKeyboardButton("üìÖ " + targetDate);
            dateButton.setCallbackData("forecast_date");

            if (daysOffSet < 2) {
                InlineKeyboardButton forwardButton = new InlineKeyboardButton("‚ñ∂ –í–ø–µ—Ä—ë–¥");
                forwardButton.setCallbackData("forecast_forward");
                row.add(forwardButton);
            }

            keyboard.add(row);
            keyboard.add(List.of(dateButton));
            inlineKeyboard.setKeyboard(keyboard);


            sendTextMessage(chatId.toString(), messageText, inlineKeyboard);


        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }


    private void handleForecastNavigation(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();

        int daysOffset = userForecastOffsets.getOrDefault(chatId, 0);

        if ("forecast_back".equals(data) && daysOffset > 0) {
            userForecastOffsets.put(chatId, daysOffset - 1);
        } else if ("forecast_forward".equals(data) && daysOffset < 2) {
            userForecastOffsets.put(chatId, daysOffset + 1);
        }


        editedThreeDays(callbackQuery.getMessage());
    }

    private void mainMenu(Message message) {
        String chatId = message.getChatId().toString();

        String text = """
                \uD83C\uDFE0 <b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b> \s
                –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: \s
                
                \uD83C\uDF24 <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</b> ‚Äì –£–∑–Ω–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ. \s
                \uD83D\uDCC5 <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è</b> ‚Äì –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏. \s
                ‚è≥ <b>–ü–æ—á–∞—Å–æ–≤–∞—è –ø–æ–≥–æ–¥–∞</b> ‚Äì –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —á–∞—Å–∞–º. \s
                \uD83C\uDF0D <b>–ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</b> ‚Äì –£–∑–Ω–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏. \s
                ‚öô\uFE0F <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äì –ò–∑–º–µ–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.""";
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("\uD83C\uDF24 –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞"));
        row1.add(new KeyboardButton("\uD83D\uDCC5 –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è "));
        row1.add(new KeyboardButton("‚è∞ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —á–∞—Å–∞–º "));

        KeyboardRow row2 = new KeyboardRow();
        KeyboardButton locationButton = new KeyboardButton("\uD83C\uDF0D –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è");
        locationButton.setRequestLocation(true);
        row2.add(locationButton);

        row2.add(new KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"));
        row2.add(new KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"));
        List<KeyboardRow> rows = new ArrayList<>();
        rows.add(row1);
        rows.add(row2);
        markup.setKeyboard(rows);
        sendTextMessage(chatId, text, markup);
    }

    private void askForCity(Message message) {
        Long chatId = message.getChatId();

        waitingForCity.put(chatId, true);

        String text = "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞)";
        sendTextMessage(chatId.toString(), text);


    }

    private void changeCity(Message message) {
        try {
            Long chatId = message.getChatId();

            String city = message.getText();

            WeatherDTO weather = weatherService.getWeatherInfo(city, 2);
            if (Objects.nonNull(weather.getLocation())) {
                userCountry.put(chatId, city);

                waitingForCity.remove(chatId);
                String text = "‚úÖ <b>–í–∞—à –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:</b> " + city;
                sendTextMessage(chatId.toString(), text);

            } else {
                sendTextMessage(chatId.toString(), "‚ùå <b>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>");
            }
        } catch (InterruptedException e) {
            sendTextMessage(message.getChatId().toString(), "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>");
        }


    }

    private void botInfo(Message message) {
        String chatId = message.getChatId().toString();
        String text = """
                <b>ü§ñ –û –±–æ—Ç–µ</b>
                
                –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–≥–æ–¥–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. üå§ \s
                –Ø –∏—Å–ø–æ–ª—å–∑—É—é <b>WeatherAPI</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. \s
                
                <b>–ß—Ç–æ —è —É–º–µ—é?</b> \s
                - üå° –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å <b>—Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É</b> \s
                - üìÖ –î–∞–≤–∞—Ç—å <b>–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è</b> \s
                - ‚è≥ –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å <b>–ø–æ—á–∞—Å–æ–≤—É—é –ø–æ–≥–æ–¥—É</b> \s
                - üåç –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–≥–æ–¥—É <b>–ø–æ —Ç–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</b> \s
                
                <b>–ö–∞–∫ –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b> \s
                –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ! üì≤ \s
                
                <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @Umarovich_712
                """;
        sendTextMessage(chatId, text);
    }

    private void editedWeather(Message message) {
        try {
            Integer messageId = message.getMessageId();

            String choosenCity = userCountry.getOrDefault(message.getChatId(), "Tashkent");

            WeatherDTO weatherDTO = weatherService.getWeatherInfo(choosenCity, 2);

            String chatId = message.getChatId().toString();

            String country = weatherDTO.getLocation().getCountry();

            String city = weatherDTO.getLocation().getName();

            double temp = weatherDTO.getCurrent().getTempC();

            LocalDateTime localtime = weatherDTO.getLocation().getLocaltime();
            DateTimeFormatter dayMonthFormatter = DateTimeFormatter.ofPattern("dd/MM");

            String date = dayMonthFormatter.format(localtime);

            double maxTemp = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMaxTemp()).findFirst().orElse(0.0);

            double minTemp = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMinTemp()).findFirst().orElse(0.0);

            String condition = weatherDTO.getCurrent().getCondition().getText();

            double windKph = weatherDTO.getCurrent().getWindKph();

            double humidity = weatherDTO.getCurrent().getHumidity();

            String sunRise = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunrise()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            String sunSet = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunset()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            String time = LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));

            String text = """
                    <b>üìÜ –î–∞—Ç–∞:</b> %s
                    <b>‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> %s
                    <b>üåç –°—Ç—Ä–∞–Ω–∞:</b> %s \s
                    <b>üåç –ì–æ—Ä–æ–¥:</b> %s \s
                    <b>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> %d¬∞C \s
                    <b>üìà –ú–∞–∫—Å:</b> %d¬∞C  |  <b>üìâ –ú–∏–Ω:</b> %d¬∞C \s
                    <b>‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> %s \s
                    <b>üí® –í–µ—Ç–µ—Ä:</b> %d –∫–º/—á \s
                    <b>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> %d \s
                    <b>üåÖ –í–æ—Å—Ö–æ–¥:</b> %s \s
                    <b>üåá –ó–∞–∫–∞—Ç:</b> %s \s
                    """.formatted(date, time, country, city, (int) temp, (int) maxTemp, (int) minTemp, condition, (int) windKph, (int) humidity, sunRise, sunSet);
            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            InlineKeyboardButton updateButton = new InlineKeyboardButton();
            updateButton.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
            updateButton.setCallbackData("update_weather");

            keyboard.add(List.of(updateButton));
            inlineKeyboard.setKeyboard(keyboard);


            editTextMessage(chatId, text, inlineKeyboard, messageId);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

    }


    private void nowWeather(Message message) {
        try {
            String choosenCity = userCountry.getOrDefault(message.getChatId(), "Tashkent");

            WeatherDTO weatherDTO = weatherService.getWeatherInfo(choosenCity, 2);

            String chatId = message.getChatId().toString();


            String country = weatherDTO.getLocation().getCountry();
            String city = weatherDTO.getLocation().getName();

            double temp = weatherDTO.getCurrent().getTempC();

            LocalDateTime localtime = weatherDTO.getLocation().getLocaltime();
            DateTimeFormatter dayMonthFormatter = DateTimeFormatter.ofPattern("dd/MM");

            String date = dayMonthFormatter.format(localtime);

            double maxTemp = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMaxTemp()).findFirst().orElse(0.0);

            double minTemp = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getDay().getMinTemp()).findFirst().orElse(0.0);

            String condition = weatherDTO.getCurrent().getCondition().getText();

            double windKph = weatherDTO.getCurrent().getWindKph();

            double humidity = weatherDTO.getCurrent().getHumidity();

            String sunRise = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunrise()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            String sunSet = weatherDTO.getForecast().getForecastDay().stream()
                    .filter(forecastDayDTO -> LocalDate.parse(forecastDayDTO.getDate()).equals(LocalDate.now()))
                    .map(forecastDayDTO -> forecastDayDTO.getAstro().getSunset()).findFirst().orElse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

            String time = LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));

            String text = """
                    <b>üìÜ –î–∞—Ç–∞:</b> %s
                    <b>‚è∞ –í—Ä–µ–º—è:</b> %s
                    <b>üåç –°—Ç—Ä–∞–Ω–∞:</b> %s \s
                    <b>üåç –ì–æ—Ä–æ–¥:</b> %s \s
                    <b>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> %d¬∞C \s
                    <b>üìà –ú–∞–∫—Å:</b> %d ¬∞C  |  <b>üìâ –ú–∏–Ω:</b> %d ¬∞C \s
                    <b>‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> %s \s
                    <b>üí® –í–µ—Ç–µ—Ä:</b> %d –∫–º/—á \s
                    <b>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> %d –ü—Ä–æ—Ü–µ–Ω—Ç–æ–≤. \s
                    <b>üåÖ –í–æ—Å—Ö–æ–¥:</b> %s \s
                    <b>üåá –ó–∞–∫–∞—Ç:</b> %s \s
                    """.formatted(date, time, country, city, (int) temp, (int) maxTemp, (int) minTemp, condition, (int) windKph, (int) humidity, sunRise, sunSet);
            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();


            InlineKeyboardButton updateButton = new InlineKeyboardButton();
            updateButton.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
            updateButton.setCallbackData("update_weather");

            keyboard.add(List.of(updateButton));
            inlineKeyboard.setKeyboard(keyboard);


            sendTextMessage(chatId, text, inlineKeyboard);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private void userStart(Message message) {
        String chatId = message.getChatId().toString();
        String text = """
                –ü—Ä–∏–≤–µ—Ç! ‚òÄÔ∏è –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É! \s
                
                –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å: \s
                - <b>üå° –¢–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É</b> \s
                - <b>üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è</b> \s
                - <b>‚è≥ –ü–æ—á–∞—Å–æ–≤—É—é –ø–æ–≥–æ–¥—É</b> (–≤—ã–±–µ—Ä–∏ <b>3, 6 –∏–ª–∏ 12</b> —á–∞—Å–æ–≤) \s
                - <b>üåç –ü–æ–≥–æ–¥—É –ø–æ —Ç–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</b> \s
                
                –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üì≤ \s
                """;
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("\uD83C\uDF24 –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞"));
        row1.add(new KeyboardButton("\uD83D\uDCC5 –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è "));
        row1.add(new KeyboardButton("‚è∞ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —á–∞—Å–∞–º "));

        KeyboardRow row2 = new KeyboardRow();
        KeyboardButton locationButton = new KeyboardButton("\uD83C\uDF0D –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è");
        locationButton.setRequestLocation(true);
        row2.add(locationButton);

        row2.add(new KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"));
        row2.add(new KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"));
        List<KeyboardRow> rows = new ArrayList<>();
        rows.add(row1);
        rows.add(row2);
        markup.setKeyboard(rows);
        sendTextMessage(chatId, text, markup);
    }

    private void settings(Message message) {
        String chatId = message.getChatId().toString();
        String text = """
                ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> \s
                –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: \s
                üåç <b>–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥</b> ‚Äì –∑–∞–¥–∞–π—Ç–µ –≥–æ—Ä–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–≥–æ–¥–∞. \s
                üîô <b>–ù–∞–∑–∞–¥</b> ‚Äì –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. \s
                """;

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);
        KeyboardRow row1 = new KeyboardRow();
        row1.add("\uD83C\uDF0D –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("\uD83D\uDD19 –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        List<KeyboardRow> rows = new ArrayList<>();
        rows.add(row1);
        rows.add(row3);
        markup.setKeyboard(rows);

        sendTextMessage(chatId, text, markup);
    }

    @Override
    public String getBotUsername() {
        return "@myweatherchecker_bot";
    }

    private void sendTextMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("HTML");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendTextMessage(String chatId, String text, ReplyKeyboardMarkup keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("HTML");
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendTextMessage(String chatId, String text, InlineKeyboardMarkup keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("HTML");
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void editTextMessage(String chatId, String text, InlineKeyboardMarkup keyboardMarkup, Integer messageId) {
        EditMessageText message = new EditMessageText();
        message.setMessageId(messageId);
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("HTML");
        message.setReplyMarkup(keyboardMarkup);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


}
